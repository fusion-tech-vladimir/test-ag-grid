{"version":3,"sources":["components/Select.js","App.js","utils.js","serviceWorker.js","index.js"],"names":["paginator","options","selected","Select","text","onChange","uniqOprions","Set","StyledContent","map","el","value","styled","div","defaultProps","columnDefs","headerName","field","toLowerCase","sortable","filter","editable","rowData","make","model","price","App","state","onGridReady","api","columnApi","gridAPI","gridColumnAPI","sizeColumnsToFit","onRowEditingStarted","event","console","log","onRowEditingStopped","onCellEditingStarted","onCellEditingStopped","onPageSizeChanged","paginationSetPageSize","target","props","this","callbacks","paginationGoToFirstPage","paginationGoToLastPage","paginationGoToNextPage","paginationGoToPreviousPage","paginationGoToPage","className","paginationPageSize","pagination","paginationNumberFormatter","toLocaleString","enableRowGroup","enablePivot","enableValue","resizable","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a08ceca9.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst paginator = { options: [1, 3, 5, 10], selected: 5 };\n\nconst Select = ({ options, selected, text, onChange }) => {\n  const uniqOprions = [...new Set(options)];\n  return <StyledContent>\n    <p>{text}</p>\n    <select onChange={onChange}>\n      {uniqOprions.map((el) => <option value={el} selected={selected === el}> {el} </option>)}\n    </select>\n  </StyledContent>\n};\n\nconst StyledContent = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: flex-start;\n  margin-top: -25px;\n  position: absolute;\n  p {\n    margin: 0 10px 0 0;\n  }\n`;\n\n\nSelect.defaultProps = {\n  options: paginator.options,\n  selected: paginator.selected,\n  text: 'Page Size:',\n}\n\nexport default Select;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\nimport 'ag-grid-enterprise';\nimport Select from './components/Select';\nimport { createColumnDefs, getSettings } from './utils';\n\nconst columns = ['Make', 'Model', 'Price'];\nconst paginator = { options: [1, 3, 5, 10], selected: 1 };\nconst columnDefs = createColumnDefs(columns);\nconst rowData = [\n  { make: \"Toyota\", model: \"Celica\", price: 35000 },\n  { make: \"Ford\", model: \"Mondeo\", price: 3200, },\n  { make: \"Porsche\", model: \"Boxter\", price: 72000 }\n];\n\nclass App extends Component {\n  state = {\n    columnDefs,\n    rowData\n  };\n\n  onGridReady = ({ api, columnApi }) => {\n    this.gridAPI = api;\n    this.gridColumnAPI = columnApi;\n    api.sizeColumnsToFit();\n  };\n\n  onRowEditingStarted = (event) => {\n    console.log('started', event);\n    console.log('never called - not doing row editing');\n  };\n\n  onRowEditingStopped = (event) => {\n    console.log('stopped', event);\n    console.log('never called - not doing row editing');\n  };\n\n  onCellEditingStarted = (event) => {\n    console.log('cellStarted', event);\n    console.log('cellEditingStarted');\n  };\n\n  onCellEditingStopped = (event) => {\n    console.log('cellStopped', event);\n    console.log('cellEditingStopped');\n  };\n\n  onPageSizeChanged = (event) => this.gridAPI.paginationSetPageSize(+event.target.value);\n\n  render() {\n    const { rowData, columnDefs } = this.state;\n    const { options, selected } = paginator;\n    const {\n      paginationGoToFirstPage,\n      paginationGoToLastPage,\n      paginationGoToNextPage,\n      paginationGoToPreviousPage,\n      paginationGoToPage,\n    } = this.gridAPI || {};\n\n    const callbacks = {\n      onGridReady: this.onGridReady,\n      onRowEditingStarted: this.onRowEditingStarted,\n      onRowEditingStopped: this.onRowEditingStopped,\n      onCellEditingStarted: this.onCellEditingStarted,\n      onCellEditingStopped: this.onCellEditingStopped,\n    };\n    return (\n      <StyledContent>\n        <div>\n          <div className=\"ag-theme-balham content\">\n            <AgGridReact\n              columnDefs={columnDefs}\n              rowData={rowData}\n              {...callbacks}\n              {...getSettings({ paginationPageSize: selected })}\n            >\n            </AgGridReact>\n          </div>\n          <Select\n            onChange={this.onPageSizeChanged}\n            options={options}\n            selected={selected}\n          />\n        </div>\n      </StyledContent>\n    );\n  }\n}\n\nconst StyledContent = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  .content {\n    height: 600px;\n    width: 600px;\n  }\n`;\n\nexport default App;\n","export const createColumnDefs = (data) => data.map(el => ({\n  headerName: el,\n  field: el.toLowerCase(),\n  sortable: true,\n  filter: true,\n  editable: true,\n}));\n\n\nexport const getSettings = (props) => ({\n  pagination: true,\n  paginationPageSize: 10,\n  paginationNumberFormatter: ({value}) => value.toLocaleString(),\n  enableRowGroup: true,\n  enablePivot: true,\n  enableValue: true,\n  resizable: true,\n  ...props,\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}